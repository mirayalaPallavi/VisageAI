name: Club Project CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: club-project

jobs:
  # Lint and Test
  lint-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [api-gateway, auth, template-service, image-pipeline, video-pipeline, embedding-service, matching-service]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        cd services/${{ matrix.service }}
        pip install -r requirements.txt
        
    - name: Run linting
      run: |
        cd services/${{ matrix.service }}
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        black . --check
        
    - name: Run tests
      run: |
        cd services/${{ matrix.service }}
        python -m pytest tests/ -v --cov=. --cov-report=xml
        
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./services/${{ matrix.service }}/coverage.xml

  # Build and Push Images
  build-push:
    needs: lint-test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [api-gateway, auth, template-service, image-pipeline, video-pipeline, embedding-service, matching-service]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./services/${{ matrix.service }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    needs: build-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
        
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        
    - name: Deploy to staging
      run: |
        export KUBECONFIG=kubeconfig
        kubectl apply -f infra/k8s/namespace.yaml
        kubectl apply -f infra/k8s/
        kubectl set image deployment/api-gateway api-gateway=${{ env.REGISTRY }}/${{ github.repository }}/api-gateway:${{ github.sha }}
        kubectl set image deployment/template-service template-service=${{ env.REGISTRY }}/${{ github.repository }}/template-service:${{ github.sha }}
        kubectl set image deployment/image-pipeline image-pipeline=${{ env.REGISTRY }}/${{ github.repository }}/image-pipeline:${{ github.sha }}
        kubectl set image deployment/video-pipeline video-pipeline=${{ env.REGISTRY }}/${{ github.repository }}/video-pipeline:${{ github.sha }}

  # Deploy to Production
  deploy-production:
    needs: build-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
        
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        
    - name: Deploy to production
      run: |
        export KUBECONFIG=kubeconfig
        kubectl apply -f infra/k8s/namespace.yaml
        kubectl apply -f infra/k8s/
        kubectl set image deployment/api-gateway api-gateway=${{ env.REGISTRY }}/${{ github.repository }}/api-gateway:${{ github.sha }}
        kubectl set image deployment/template-service template-service=${{ env.REGISTRY }}/${{ github.repository }}/template-service:${{ github.sha }}
        kubectl set image deployment/image-pipeline image-pipeline=${{ env.REGISTRY }}/${{ github.repository }}/image-pipeline:${{ github.sha }}
        kubectl set image deployment/video-pipeline video-pipeline=${{ env.REGISTRY }}/${{ github.repository }}/video-pipeline:${{ github.sha }}
        
    - name: Create release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          Automated release for commit ${{ github.sha }}
          
          Changes in this release:
          - Updated all microservices to latest images
          - Deployed to production environment
        draft: false
        prerelease: false
